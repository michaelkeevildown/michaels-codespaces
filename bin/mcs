#!/bin/bash

# Michael's Codespaces CLI
# A brew-like command for managing codespaces

set -e

# Determine installation directory
# First check if we're running from a development directory
SCRIPT_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if [ -f "$SCRIPT_PATH/../scripts/core/create-codespace.sh" ]; then
    # Running from development directory
    CODESPACE_HOME="$(cd "$SCRIPT_PATH/.." && pwd)"
else
    # Running from installed location
    CODESPACE_HOME="${CODESPACE_HOME:-$HOME/.mcs}"
fi

# Configuration
CODESPACES_DIR="$HOME/codespaces"
SETUP_SCRIPT="$CODESPACE_HOME/scripts/core/create-codespace.sh"
VERSION="1.0.0"

# Export for child scripts
export CODESPACE_HOME
export CODESPACES_DIR

# Colors
if [[ -t 1 ]]; then
    tty_red=$(printf '\033[31m')
    tty_green=$(printf '\033[32m')
    tty_yellow=$(printf '\033[33m')
    tty_blue=$(printf '\033[34m')
    tty_purple=$(printf '\033[35m')
    tty_cyan=$(printf '\033[36m')
    tty_bold=$(printf '\033[1m')
    tty_dim=$(printf '\033[2m')
    tty_reset=$(printf '\033[0m')
else
    tty_red='' tty_green='' tty_yellow='' tty_blue=''
    tty_purple='' tty_cyan='' tty_bold='' tty_dim='' tty_reset=''
fi

# Helper functions
info() {
    printf "${tty_blue}==>${tty_reset} ${tty_bold}%s${tty_reset}\n" "$1"
}

success() {
    printf "${tty_green}✓${tty_reset} %s\n" "$1"
}

warning() {
    printf "${tty_yellow}⚠${tty_reset}  %s\n" "$1"
}

error() {
    printf "${tty_red}✗${tty_reset} %s\n" "$1" >&2
}

# Source config manager for auto-update functionality
if [ -f "$CODESPACE_HOME/scripts/modules/storage/config-manager.sh" ]; then
    source "$CODESPACE_HOME/scripts/modules/storage/config-manager.sh"
fi

# Check for updates
check_for_updates() {
    # Skip if disabled via environment variable
    if [ "${MCS_NO_AUTO_UPDATE:-}" = "1" ] || [ "${MCS_NO_AUTO_UPDATE:-}" = "true" ]; then
        return 0
    fi
    
    # Skip if config manager not available
    if ! command -v should_check_for_update >/dev/null 2>&1; then
        return 0
    fi
    
    # Check if we should check for updates
    if ! should_check_for_update; then
        return 0
    fi
    
    # Update the last check timestamp
    set_last_update_check "$(date +%s)"
    
    # Perform the update check in background with timeout
    (
        # Set a timeout for the git operation
        if command -v timeout >/dev/null 2>&1; then
            timeout_cmd="timeout 5"
        else
            # macOS doesn't have timeout by default, use alternative
            timeout_cmd=""
        fi
        
        cd "$CODESPACE_HOME" 2>/dev/null || exit 0
        
        # Fetch updates quietly
        if $timeout_cmd git fetch --quiet origin main 2>/dev/null; then
            # Check if we're behind
            local local_sha=$(git rev-parse HEAD 2>/dev/null)
            local remote_sha=$(git rev-parse origin/main 2>/dev/null)
            
            if [ "$local_sha" != "$remote_sha" ]; then
                # Get commit count difference
                local behind_count=$(git rev-list HEAD..origin/main --count 2>/dev/null || echo "0")
                
                if [ "$behind_count" -gt 0 ]; then
                    echo ""
                    info "Auto-update: New version available!"
                    echo "   ${tty_dim}$behind_count new commit(s) behind origin/main${tty_reset}"
                    echo "   Run '${tty_bold}mcs update${tty_reset}' to update Michael's Codespaces"
                    echo ""
                fi
            fi
        fi
    ) &
    
    # Don't wait for the background check
    return 0
}

# Get safe repo name from URL
get_safe_name() {
    local repo_url="$1"
    local repo_name=$(basename "$repo_url" .git)
    local repo_owner=$(echo "$repo_url" | sed -E 's/.*[:/]([^/]+)\/[^/]+$/\1/')
    local full_name="${repo_owner}-${repo_name}"
    echo "$full_name" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g'
}

# Commands
cmd_create() {
    if [ -z "$1" ]; then
        error "Usage: mcs create <repository-url> [options]"
        echo "Run 'mcs help create' for detailed options"
        exit 1
    fi
    
    if [ ! -f "$SETUP_SCRIPT" ]; then
        error "Create script not found. Is Michael's Codespaces installed correctly?"
        error "Try running: mcs doctor"
        exit 1
    fi
    
    # Pass all arguments to the create script
    "$SETUP_SCRIPT" "$@"
}

cmd_list() {
    # Source network utilities to get configured IP
    if [ -f "$CODESPACE_HOME/scripts/modules/network/network-utils.sh" ]; then
        source "$CODESPACE_HOME/scripts/modules/network/network-utils.sh"
    fi
    
    printf "${tty_bold}Codespaces:${tty_reset}\n"
    printf "${tty_cyan}%-30s %-10s %-30s${tty_reset}\n" "NAME" "STATUS" "URL"
    printf "%-30s %-10s %-30s\n" "----" "------" "---"
    
    local found=0
    for dir in "$CODESPACES_DIR"/*/; do
        if [ -d "$dir" ] && [ -f "$dir/docker-compose.yml" ]; then
            local basename=$(basename "$dir")
            if [[ ! "$basename" =~ ^(shared|auth|backups|scripts)$ ]]; then
                found=1
                
                if [ -f "$dir/.env" ]; then
                    local vs_code_port=$(grep "VS_CODE_PORT=" "$dir/.env" | cut -d'=' -f2)
                    local container_name="${basename}-dev"
                    
                    # Check if running
                    if docker ps --format '{{.Names}}' 2>/dev/null | grep -q "^${container_name}$"; then
                        local access_url=$(get_access_url "$vs_code_port" 2>/dev/null || echo "http://localhost:$vs_code_port")
                        printf "${tty_green}%-30s${tty_reset} %-10s %-30s\n" \
                            "$basename" "running" "$access_url"
                    else
                        printf "%-30s ${tty_yellow}%-10s${tty_reset} %-30s\n" \
                            "$basename" "stopped" "port $vs_code_port"
                    fi
                fi
            fi
        fi
    done
    
    if [ $found -eq 0 ]; then
        warning "No codespaces found. Create one with: mcs create <repo-url>"
    fi
}

cmd_start() {
    if [ -z "$1" ]; then
        error "Usage: mcs start <codespace-name>"
        echo "Run 'mcs list' to see available codespaces"
        exit 1
    fi
    
    local codespace_dir="$CODESPACES_DIR/$1"
    if [ ! -f "$codespace_dir/docker-compose.yml" ]; then
        error "Codespace '$1' not found"
        exit 1
    fi
    
    info "Starting $1..."
    # Source network utilities to get configured IP
    if [ -f "$CODESPACE_HOME/scripts/modules/network/network-utils.sh" ]; then
        source "$CODESPACE_HOME/scripts/modules/network/network-utils.sh"
    fi
    
    docker-compose -f "$codespace_dir/docker-compose.yml" up -d
    
    if [ -f "$codespace_dir/.env" ]; then
        local vs_code_port=$(grep "VS_CODE_PORT=" "$codespace_dir/.env" | cut -d'=' -f2)
        local password=$(grep "PASSWORD=" "$codespace_dir/.env" | cut -d'=' -f2)
        local access_url=$(get_access_url "$vs_code_port" 2>/dev/null || echo "http://localhost:$vs_code_port")
        success "Started! Access at: ${tty_bold}$access_url${tty_reset}"
        echo "   Password: $password"
    fi
}

cmd_stop() {
    if [ -z "$1" ]; then
        error "Usage: mcs stop <codespace-name>"
        echo "Run 'mcs list' to see running codespaces"
        exit 1
    fi
    
    local codespace_dir="$CODESPACES_DIR/$1"
    if [ ! -f "$codespace_dir/docker-compose.yml" ]; then
        error "Codespace '$1' not found"
        exit 1
    fi
    
    info "Stopping $1..."
    docker-compose -f "$codespace_dir/docker-compose.yml" stop
    success "Stopped"
}

cmd_restart() {
    if [ -z "$1" ]; then
        error "Usage: mcs restart <codespace-name>"
        exit 1
    fi
    
    cmd_stop "$1"
    cmd_start "$1"
}

cmd_remove() {
    if [ -z "$1" ]; then
        error "Usage: mcs remove <codespace-name>"
        exit 1
    fi
    
    local codespace_dir="$CODESPACES_DIR/$1"
    if [ ! -f "$codespace_dir/docker-compose.yml" ]; then
        error "Codespace '$1' not found"
        exit 1
    fi
    
    warning "This will permanently delete the codespace '$1' and all its data"
    read -p "Are you sure? [y/N] " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        info "Removing $1..."
        docker-compose -f "$codespace_dir/docker-compose.yml" down 2>/dev/null || true
        rm -rf "$codespace_dir"
        
        # Remove aliases from .zshrc
        if [ -f ~/.zshrc ]; then
            sed -i.bak "/# Codespace: $1/,+1d" ~/.zshrc
        fi
        
        success "Removed"
    else
        echo "Cancelled"
    fi
}

cmd_logs() {
    if [ -z "$1" ]; then
        error "Usage: mcs logs <codespace-name>"
        exit 1
    fi
    
    local codespace_dir="$CODESPACES_DIR/$1"
    if [ ! -f "$codespace_dir/docker-compose.yml" ]; then
        error "Codespace '$1' not found"
        exit 1
    fi
    
    docker-compose -f "$codespace_dir/docker-compose.yml" logs -f
}

cmd_exec() {
    if [ -z "$1" ]; then
        error "Usage: mcs exec <codespace-name> [command]"
        exit 1
    fi
    
    local codespace_name="$1"
    shift
    local container_name="${codespace_name}-dev"
    
    if [ $# -eq 0 ]; then
        # Interactive shell
        docker exec -it "$container_name" /bin/bash
    else
        # Run command
        docker exec -it "$container_name" "$@"
    fi
}

cmd_info() {
    if [ -z "$1" ]; then
        error "Usage: mcs info <codespace-name>"
        exit 1
    fi
    
    local codespace_dir="$CODESPACES_DIR/$1"
    if [ ! -f "$codespace_dir/.env" ]; then
        error "Codespace '$1' not found"
        exit 1
    fi
    
    # Read values from .env file
    local repo_url=$(grep "^REPO_URL=" "$codespace_dir/.env" | cut -d'=' -f2)
    local vs_code_port=$(grep "^VS_CODE_PORT=" "$codespace_dir/.env" | cut -d'=' -f2)
    local app_port=$(grep "^APP_PORT=" "$codespace_dir/.env" | cut -d'=' -f2)
    local password=$(grep "^PASSWORD=" "$codespace_dir/.env" | cut -d'=' -f2)
    local created=$(grep "^CREATED=" "$codespace_dir/.env" | cut -d'=' -f2)
    
    # Get access IP
    local access_ip="localhost"
    if [ -f "$HOME/.mcs/scripts/modules/network/network-utils.sh" ]; then
        source "$HOME/.mcs/scripts/modules/storage/config-manager.sh" 2>/dev/null || true
        source "$HOME/.mcs/scripts/modules/network/network-utils.sh" 2>/dev/null || true
        access_ip=$(get_access_ip 2>/dev/null || echo "localhost")
    fi
    
    local vs_code_url="http://$access_ip:$vs_code_port"
    
    echo ""
    echo "${tty_bold}Codespace Information${tty_reset}"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    echo "${tty_bold}Name:${tty_reset} $1"
    echo "${tty_bold}Repository:${tty_reset} $repo_url"
    echo "${tty_bold}Created:${tty_reset} $created"
    echo ""
    echo "${tty_bold}Access Details:${tty_reset}"
    echo "  ${tty_bold}VS Code URL:${tty_reset} ${tty_green}$vs_code_url${tty_reset}"
    echo "  ${tty_bold}Password:${tty_reset} ${tty_green}$password${tty_reset}"
    
    if [ -n "$app_port" ] && [ "$app_port" != "" ]; then
        echo "  ${tty_bold}App Port:${tty_reset} $app_port"
    fi
    
    echo ""
    
    # Check if running
    local container_name="${1}-dev"
    if docker ps --format '{{.Names}}' 2>/dev/null | grep -q "^${container_name}$"; then
        echo "${tty_bold}Status:${tty_reset} ${tty_green}● Running${tty_reset}"
        
        # Get container stats
        local stats=$(docker stats --no-stream --format "{{.MemUsage}}\t{{.CPUPerc}}" "$container_name" 2>/dev/null | tail -n 1)
        if [ -n "$stats" ]; then
            echo "${tty_bold}Resources:${tty_reset} $stats"
        fi
    else
        echo "${tty_bold}Status:${tty_reset} ${tty_yellow}○ Stopped${tty_reset}"
    fi
    
    # Directory info
    echo "${tty_bold}Location:${tty_reset} $codespace_dir"
    if [ -d "$codespace_dir/src" ]; then
        local size=$(du -sh "$codespace_dir/src" 2>/dev/null | cut -f1)
        echo "${tty_bold}Source size:${tty_reset} $size"
    fi
    
    echo ""
    echo "${tty_dim}Tip: Use 'mcs recover $1' for quick credential recovery${tty_reset}"
    echo ""
}

cmd_status() {
    ~/monitor-system.sh
}

cmd_update() {
    info "Updating Michael's Codespaces..."
    
    cd "$CODESPACE_HOME" || {
        error "Could not change to MCS directory"
        exit 1
    }
    
    # Get current version before update
    local current_sha=$(git rev-parse --short HEAD 2>/dev/null)
    
    # Perform the update
    if git pull origin main; then
        # Get new version after update
        local new_sha=$(git rev-parse --short HEAD 2>/dev/null)
        
        if [ "$current_sha" != "$new_sha" ]; then
            # Show what changed
            echo ""
            info "Changes in this update:"
            git log --oneline --no-decorate "$current_sha..$new_sha" | while read line; do
                echo "   • $line"
            done
            echo ""
        fi
        
        # Update last update check timestamp
        if command -v set_last_update_check >/dev/null 2>&1; then
            set_last_update_check "$(date +%s)"
        fi
        
        # Update known version
        if command -v set_last_known_version >/dev/null 2>&1; then
            set_last_known_version "$VERSION"
        fi
        
        success "Updated to latest version"
    else
        error "Failed to update. Please check your internet connection and try again."
        exit 1
    fi
}

cmd_recover() {
    if [ -z "$1" ]; then
        error "Usage: mcs recover <codespace-name>"
        exit 1
    fi
    
    local codespace_dir="$CODESPACES_DIR/$1"
    if [ ! -f "$codespace_dir/.env" ]; then
        error "Codespace '$1' not found"
        exit 1
    fi
    
    # Read credentials from .env file
    local password=$(grep "^PASSWORD=" "$codespace_dir/.env" | cut -d'=' -f2)
    local vs_code_port=$(grep "^VS_CODE_PORT=" "$codespace_dir/.env" | cut -d'=' -f2)
    local repo_url=$(grep "^REPO_URL=" "$codespace_dir/.env" | cut -d'=' -f2)
    
    # Get access IP (try to source network-utils or use localhost)
    local access_ip="localhost"
    if [ -f "$HOME/.mcs/scripts/modules/network/network-utils.sh" ]; then
        source "$HOME/.mcs/scripts/modules/storage/config-manager.sh" 2>/dev/null || true
        source "$HOME/.mcs/scripts/modules/network/network-utils.sh" 2>/dev/null || true
        access_ip=$(get_access_ip 2>/dev/null || echo "localhost")
    fi
    
    local vs_code_url="http://$access_ip:$vs_code_port"
    
    # Display credentials
    echo ""
    echo "${tty_bold}Codespace Credentials Recovery${tty_reset}"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    echo "${tty_bold}Codespace:${tty_reset} $1"
    echo "${tty_bold}Repository:${tty_reset} $repo_url"
    echo ""
    echo "${tty_bold}VS Code Access:${tty_reset}"
    echo "  URL: ${tty_green}$vs_code_url${tty_reset}"
    echo "  Password: ${tty_green}$password${tty_reset}"
    echo ""
    echo "${tty_bold}Quick Connect:${tty_reset}"
    echo "  1. Open: $vs_code_url"
    echo "  2. Enter password: $password"
    echo ""
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
}

cmd_reset_password() {
    if [ -z "$1" ]; then
        error "Usage: mcs reset-password <codespace-name>"
        exit 1
    fi
    
    local codespace_dir="$CODESPACES_DIR/$1"
    if [ ! -f "$codespace_dir/.env" ]; then
        error "Codespace '$1' not found"
        exit 1
    fi
    
    # Generate new password
    local new_password=$(openssl rand -base64 12 2>/dev/null || cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1)
    
    # Update .env file
    info "Updating password in .env file..."
    sed -i.bak "s/^PASSWORD=.*/PASSWORD=$new_password/" "$codespace_dir/.env"
    sed -i.bak "s/^CODE_SERVER_PASSWORD=.*/CODE_SERVER_PASSWORD=$new_password/" "$codespace_dir/.env"
    rm -f "$codespace_dir/.env.bak"
    
    # Update README.md if it exists
    if [ -f "$codespace_dir/README.md" ]; then
        info "Updating password in README.md..."
        sed -i.bak "s/Password: .*/Password: $new_password/" "$codespace_dir/README.md"
        rm -f "$codespace_dir/README.md.bak"
    fi
    
    # Check if container is running
    local container_name="${1}-dev"
    if docker ps --format '{{.Names}}' 2>/dev/null | grep -q "^${container_name}$"; then
        info "Restarting container with new password..."
        docker-compose -f "$codespace_dir/docker-compose.yml" restart
        sleep 3
    fi
    
    success "Password reset successfully!"
    
    # Show new credentials
    cmd_recover "$1"
}

cmd_cleanup() {
    info "Cleaning up Michael's Codespaces installation (soft cleanup)..."
    warning "Note: Your codespace containers will continue running"
    
    # Remove MCS installation directory only
    warning "Removing MCS installation files..."
    rm -rf "$CODESPACE_HOME"
    
    # Remove aliases from shell config
    if [ -f ~/.zshrc ]; then
        warning "Removing MCS aliases from .zshrc..."
        sed -i.bak '/# Michael.s Codespaces aliases/,/# End Michael.s Codespaces aliases/d' ~/.zshrc
        sed -i.bak '/# Codespace:/,+1d' ~/.zshrc
    fi
    
    if [ -f ~/.bashrc ]; then
        warning "Removing MCS aliases from .bashrc..."
        sed -i.bak '/# Michael.s Codespaces aliases/,/# End Michael.s Codespaces aliases/d' ~/.bashrc
    fi
    
    # Remove monitoring script
    rm -f ~/monitor-system.sh
    
    # Remove mcs from PATH (if it was added)
    if [ -f ~/.zshrc ]; then
        sed -i.bak '/export PATH.*\.mcs\/bin/d' ~/.zshrc
    fi
    if [ -f ~/.bashrc ]; then
        sed -i.bak '/export PATH.*\.mcs\/bin/d' ~/.bashrc
    fi
    
    success "MCS installation removed!"
    echo ""
    echo "✓ Your codespaces in ~/codespaces are preserved"
    echo "✓ All running containers are still active"
    echo "✓ Docker remains installed"
    echo ""
    echo "To reinstall MCS, run the installer again."
}

cmd_destroy() {
    warning "This will remove Michael's Codespaces and optionally its dependencies"
    echo ""
    read -p "Are you sure you want to continue? Type 'DESTROY' to confirm: " -r
    
    if [[ $REPLY == "DESTROY" ]]; then
        info "Starting destruction process..."
        
        # Always remove MCS files and codespaces
        warning "Removing all MCS directories and codespaces..."
        
        # Stop all running containers first
        if docker ps -q 2>/dev/null | grep -q .; then
            warning "Stopping all Docker containers..."
            docker stop $(docker ps -aq) 2>/dev/null || true
        fi
        
        # Remove all MCS directories
        rm -rf "$CODESPACES_DIR"
        rm -rf "$CODESPACE_HOME"
        rm -f ~/monitor-system.sh
        
        # Remove aliases from shell configs
        if [ -f ~/.zshrc ]; then
            sed -i.bak '/# Michael.s Codespaces aliases/,/# End Michael.s Codespaces aliases/d' ~/.zshrc
            sed -i.bak '/# Codespace:/,+1d' ~/.zshrc
            sed -i.bak '/export PATH.*\.mcs\/bin/d' ~/.zshrc
        fi
        
        if [ -f ~/.bashrc ]; then
            sed -i.bak '/# Michael.s Codespaces aliases/,/# End Michael.s Codespaces aliases/d' ~/.bashrc
            sed -i.bak '/export PATH.*\.mcs\/bin/d' ~/.bashrc
        fi
        
        success "MCS files and codespaces removed"
        
        # Ask about Docker
        echo ""
        read -p "Do you want to uninstall Docker and remove all containers/images? [y/N] " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            warning "Removing ALL Docker resources..."
            docker rm $(docker ps -aq) 2>/dev/null || true
            docker rmi $(docker images -q) 2>/dev/null || true
            docker volume rm $(docker volume ls -q) 2>/dev/null || true
            docker network rm $(docker network ls -q | grep -v bridge | grep -v host | grep -v none) 2>/dev/null || true
            docker system prune -af --volumes 2>/dev/null || true
            
            warning "Uninstalling Docker..."
            if command -v apt-get >/dev/null 2>&1; then
                sudo systemctl stop docker 2>/dev/null || true
                sudo apt-get purge -y docker-ce docker-ce-cli containerd.io docker-compose-plugin docker-buildx-plugin
                sudo apt-get purge -y docker-compose
                sudo apt-get autoremove -y
                sudo rm -rf /var/lib/docker
                sudo rm -rf /var/lib/containerd
                sudo rm -rf /etc/docker
            fi
            
            # Remove Docker group
            if getent group docker >/dev/null; then
                sudo groupdel docker 2>/dev/null || true
            fi
            
            success "Docker completely removed"
        else
            info "Docker installation preserved"
        fi
        
        # Ask about Oh My Zsh
        if [ -d ~/.oh-my-zsh ]; then
            echo ""
            read -p "Do you want to remove Oh My Zsh and revert to bash? [y/N] " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                warning "Removing Oh My Zsh..."
                rm -rf ~/.oh-my-zsh
                if [ -f ~/.zshrc.pre-oh-my-zsh ]; then
                    mv ~/.zshrc.pre-oh-my-zsh ~/.zshrc
                fi
                
                # Reset shell to bash
                if [ "$SHELL" = "/usr/bin/zsh" ] || [ "$SHELL" = "/bin/zsh" ]; then
                    warning "Resetting shell to bash..."
                    chsh -s /bin/bash
                fi
                
                success "Oh My Zsh removed and shell reset to bash"
            else
                info "Oh My Zsh preserved"
            fi
        fi
        
        # Ask about development packages
        echo ""
        read -p "Do you want to remove development packages (nodejs, npm, etc.)? [y/N] " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            warning "Removing development packages..."
            sudo apt-get remove -y nodejs npm zsh 2>/dev/null || true
            sudo apt-get autoremove -y
            success "Development packages removed"
        else
            info "Development packages preserved"
        fi
        
        echo ""
        success "Destruction process completed!"
        echo ""
        echo "Summary:"
        echo "✓ MCS completely removed"
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo "✓ Docker uninstalled"
        fi
        echo ""
        warning "Please logout and login again for all changes to take effect."
    else
        echo "Destruction cancelled."
    fi
}

cmd_update_ip() {
    # Source network utilities
    if [ -f "$CODESPACE_HOME/scripts/modules/network/network-utils.sh" ]; then
        source "$CODESPACE_HOME/scripts/modules/network/network-utils.sh"
    else
        error "Network utilities module not found"
        exit 1
    fi
    
    # Source config manager
    if [ -f "$CODESPACE_HOME/scripts/modules/storage/config-manager.sh" ]; then
        source "$CODESPACE_HOME/scripts/modules/storage/config-manager.sh"
    else
        error "Config manager module not found"
        exit 1
    fi
    
    # Handle command line options
    if [ $# -eq 0 ]; then
        # Interactive mode
        configure_ip_interactive
    else
        case "$1" in
            --show|show)
                show_detected_ips
                ;;
            --auto|-a|auto)
                update_ip_config "--auto"
                ;;
            --public|-p|public)
                update_ip_config "--public"
                ;;
            --localhost|-l|localhost)
                update_ip_config "--localhost"
                ;;
            --ip|-i)
                if [ -z "$2" ]; then
                    error "IP address required"
                    echo "Usage: mcs update-ip --ip <address>"
                    exit 1
                fi
                update_ip_config "--ip" "$2"
                ;;
            *)
                # Assume it's an IP address
                if validate_ip_address "$1"; then
                    update_ip_config "--ip" "$1"
                else
                    error "Invalid option or IP address: $1"
                    echo ""
                    echo "Usage: mcs update-ip [options]"
                    echo ""
                    echo "Options:"
                    echo "  --show            Show current IP configuration"
                    echo "  --auto, -a        Auto-detect local IP"
                    echo "  --public, -p      Auto-detect public IP"
                    echo "  --localhost, -l   Use localhost"
                    echo "  --ip <address>    Set specific IP address"
                    echo "  <address>         Set specific IP address (shorthand)"
                    echo ""
                    echo "Interactive mode: mcs update-ip"
                    exit 1
                fi
                ;;
        esac
    fi
    
    # Update all existing codespace READMEs with new IP
    info "Updating existing codespace configurations..."
    local count=0
    for codespace_dir in "$CODESPACES_DIR"/*/; do
        if [ -d "$codespace_dir" ] && [ -f "$codespace_dir/.env" ]; then
            local codespace_name=$(basename "$codespace_dir")
            if update_codespace_urls "$codespace_dir"; then
                ((count++))
            fi
        fi
    done
    
    if [ $count -gt 0 ]; then
        success "Updated $count codespace(s) with new IP configuration"
    fi
}

# Update URLs in a specific codespace
update_codespace_urls() {
    local codespace_dir="$1"
    local readme_file="$codespace_dir/README.md"
    
    if [ ! -f "$readme_file" ]; then
        return 1
    fi
    
    # Get the new IP
    local new_ip=$(get_access_ip)
    
    # Update URLs in README - replace any http://[ip/hostname]:port pattern
    sed -i.bak "s|http://[^:]*:\([0-9]*\)|http://${new_ip}:\1|g" "$readme_file"
    rm -f "${readme_file}.bak"
    
    return 0
}

cmd_autoupdate() {
    local subcommand="${1:-status}"
    shift || true
    
    case "$subcommand" in
        on|enable)
            set_auto_update_enabled "true"
            success "Auto-update enabled"
            ;;
        off|disable)
            set_auto_update_enabled "false"
            success "Auto-update disabled"
            ;;
        interval)
            if [ -z "$1" ]; then
                error "Usage: mcs autoupdate interval <seconds>"
                echo "Current interval: $(get_auto_update_interval) seconds"
                exit 1
            fi
            
            # Validate the interval is a number
            if ! [[ "$1" =~ ^[0-9]+$ ]]; then
                error "Interval must be a positive number in seconds"
                exit 1
            fi
            
            # Minimum interval is 1 hour (3600 seconds)
            if [ "$1" -lt 3600 ]; then
                error "Interval must be at least 3600 seconds (1 hour)"
                exit 1
            fi
            
            set_auto_update_interval "$1"
            success "Auto-update interval set to $1 seconds"
            ;;
        status)
            printf "${tty_bold}Auto-update Status${tty_reset}\n"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            
            local enabled=$(is_auto_update_enabled && echo "enabled" || echo "disabled")
            local interval=$(get_auto_update_interval)
            local last_check=$(get_last_update_check)
            local last_version=$(get_last_known_version)
            
            echo "Status: ${tty_bold}$enabled${tty_reset}"
            echo "Check interval: ${tty_bold}$interval${tty_reset} seconds ($(($interval / 3600)) hours)"
            
            if [ "$last_check" != "0" ]; then
                local last_check_date=$(date -r "$last_check" 2>/dev/null || date -d "@$last_check" 2>/dev/null || echo "unknown")
                echo "Last check: $last_check_date"
                
                # Calculate next check time
                local next_check=$((last_check + interval))
                local current_time=$(date +%s)
                if [ $next_check -gt $current_time ]; then
                    local time_until_next=$((next_check - current_time))
                    echo "Next check: in $(($time_until_next / 60)) minutes"
                else
                    echo "Next check: on next mcs command"
                fi
            else
                echo "Last check: never"
                echo "Next check: on next mcs command"
            fi
            
            echo "Last known version: $last_version"
            echo ""
            echo "${tty_dim}Tip: Set MCS_NO_AUTO_UPDATE=1 to temporarily disable checks${tty_reset}"
            ;;
        help|--help|-h)
            cat << EOF
${tty_bold}mcs autoupdate - Configure automatic update checking${tty_reset}

${tty_bold}Usage:${tty_reset} mcs autoupdate <subcommand> [options]

${tty_bold}Subcommands:${tty_reset}
  ${tty_cyan}status${tty_reset}              Show current auto-update configuration (default)
  ${tty_cyan}on${tty_reset}, ${tty_cyan}enable${tty_reset}        Enable automatic update checking
  ${tty_cyan}off${tty_reset}, ${tty_cyan}disable${tty_reset}      Disable automatic update checking
  ${tty_cyan}interval${tty_reset} <seconds>  Set update check interval (minimum: 3600)
  ${tty_cyan}help${tty_reset}               Show this help message

${tty_bold}Examples:${tty_reset}
  mcs autoupdate                    # Show current status
  mcs autoupdate on                 # Enable auto-update
  mcs autoupdate off                # Disable auto-update
  mcs autoupdate interval 86400     # Check once per day
  mcs autoupdate interval 43200     # Check twice per day

${tty_bold}Environment Variables:${tty_reset}
  MCS_NO_AUTO_UPDATE=1    Temporarily disable update checks

EOF
            ;;
        *)
            error "Unknown subcommand: $subcommand"
            echo "Run 'mcs autoupdate help' for usage"
            exit 1
            ;;
    esac
}

cmd_doctor() {
    printf "${tty_bold}Michael's Codespaces Doctor${tty_reset}\n"
    echo "─────────────────────────────"
    
    # Check Docker
    printf "Docker: "
    if command -v docker >/dev/null 2>&1; then
        if docker ps >/dev/null 2>&1; then
            printf "${tty_green}✓${tty_reset} installed and running\n"
        else
            printf "${tty_yellow}⚠${tty_reset}  installed but not accessible (logout/login needed?)\n"
        fi
    else
        printf "${tty_red}✗${tty_reset} not installed\n"
    fi
    
    # Check docker-compose
    printf "Docker Compose: "
    if command -v docker-compose >/dev/null 2>&1; then
        printf "${tty_green}✓${tty_reset} installed\n"
    else
        printf "${tty_red}✗${tty_reset} not installed\n"
    fi
    
    # Check directories
    printf "Codespaces directory: "
    if [ -d "$CODESPACES_DIR" ]; then
        printf "${tty_green}✓${tty_reset} exists\n"
    else
        printf "${tty_red}✗${tty_reset} missing\n"
    fi
    
    # Check setup script
    printf "Setup script: "
    if [ -x "$SETUP_SCRIPT" ]; then
        printf "${tty_green}✓${tty_reset} found and executable\n"
    else
        printf "${tty_red}✗${tty_reset} missing or not executable\n"
    fi
    
    # Check GitHub auth
    printf "GitHub Token: "
    if [ -f "$CODESPACES_DIR/auth/tokens/github.token" ] && [ -s "$CODESPACES_DIR/auth/tokens/github.token" ]; then
        # Verify token is valid format (starts with ghp_ and is right length)
        token=$(head -n1 "$CODESPACES_DIR/auth/tokens/github.token" 2>/dev/null)
        if [[ "$token" =~ ^ghp_[a-zA-Z0-9]{36}$ ]]; then
            printf "${tty_green}✓${tty_reset} configured\n"
        else
            printf "${tty_yellow}⚠${tty_reset}  invalid format\n"
        fi
    else
        printf "${tty_red}✗${tty_reset} not configured\n"
        printf "  ${tty_dim}→ See: ~/codespaces/auth/tokens/README.md${tty_reset}\n"
    fi
}

cmd_help_create() {
    cat << EOF
${tty_bold}mcs create - Create a new codespace${tty_reset}

${tty_bold}Usage:${tty_reset} mcs create <repository-url> [options]

${tty_bold}Options:${tty_reset}
  --name <name>      Custom codespace name (default: auto-generated)
  --image <image>    Docker image to use
  --language <lang>  Language preset (node, python, go, rust, java)
  --ports <ports>    Port mappings (format: "8080:8080,3000:3000")
  --env-file <file>  Environment variables file
  --no-start         Don't start the container after creation
  --force            Overwrite existing codespace
  --shallow           Use shallow clone (depth=1) for faster cloning
  --depth <n>        Clone depth (1=shallow, 0=full history, default: auto-detect)
  --debug            Enable debug output

${tty_bold}Examples:${tty_reset}
  mcs create git@github.com:facebook/react.git
  mcs create https://github.com/nodejs/node.git --language node
  mcs create git@github.com:user/repo.git --name my-project --ports "8090:8080"
  mcs create git@github.com:user/repo.git --image python:3.11 --env-file .env
  mcs create https://github.com/homebrew/homebrew-core.git --shallow
  mcs create https://github.com/torvalds/linux.git --depth 10

${tty_bold}Note:${tty_reset} Large repositories (homebrew-core, linux, chromium, etc.) will 
automatically use shallow clone unless --depth 0 is specified.

EOF
}

cmd_help() {
    if [ "$1" == "create" ]; then
        cmd_help_create
        return
    fi
    
    cat << EOF
${tty_bold}Michael's Codespaces (mcs) v${VERSION}${tty_reset}

${tty_bold}Usage:${tty_reset} mcs <command> [arguments]

${tty_bold}Commands:${tty_reset}
  ${tty_cyan}create${tty_reset} <repo-url>     Create a new codespace from a GitHub repository
  ${tty_cyan}list${tty_reset}                  List all codespaces and their status
  ${tty_cyan}start${tty_reset} <name>          Start a codespace
  ${tty_cyan}stop${tty_reset} <name>           Stop a running codespace
  ${tty_cyan}restart${tty_reset} <name>        Restart a codespace
  ${tty_cyan}remove${tty_reset} <name>         Remove a codespace permanently
  ${tty_cyan}logs${tty_reset} <name>           View logs for a codespace
  ${tty_cyan}exec${tty_reset} <name> [cmd]     Execute a command in a codespace (or enter shell)
  ${tty_cyan}info${tty_reset} <name>           Show detailed information about a codespace
  ${tty_cyan}recover${tty_reset} <name>        Recover VS Code URL and password for a codespace
  ${tty_cyan}reset-password${tty_reset} <name>  Reset the password for a codespace
  ${tty_cyan}status${tty_reset}                Show system and codespaces status
  ${tty_cyan}update${tty_reset}                Update Michael's Codespaces to latest version
  ${tty_cyan}autoupdate${tty_reset}            Configure automatic update checking
  ${tty_cyan}update-ip${tty_reset}             Configure IP address for accessing codespaces
  ${tty_cyan}cleanup${tty_reset}               Remove MCS but keep Docker/system packages (soft cleanup)
  ${tty_cyan}destroy${tty_reset}               Completely remove MCS and all dependencies (factory reset)
  ${tty_cyan}doctor${tty_reset}                Check system health and configuration
  ${tty_cyan}help${tty_reset}                  Show this help message

${tty_bold}Examples:${tty_reset}
  mcs create git@github.com:facebook/react.git
  mcs list
  mcs start facebook-react
  mcs exec facebook-react npm install
  mcs stop facebook-react

${tty_bold}Shortcuts:${tty_reset}
  mcs ls                 Alias for 'list'
  mcs rm                 Alias for 'remove'

${tty_bold}Cleanup Options:${tty_reset}
  mcs cleanup            Removes MCS files but keeps Docker installed
  mcs destroy            Complete uninstall (requires typing 'DESTROY' to confirm)

${tty_bold}More info:${tty_reset} https://github.com/michaelkeevildown/michaels-codespaces
EOF
}

# Check if we should run update check for this command
should_run_update_check() {
    local cmd="$1"
    case "$cmd" in
        create|new|list|ls|start|up|stop|down|restart|remove|rm|delete|exec|run|info|show|status|monitor)
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

# Check for --no-auto-update flag
NO_AUTO_UPDATE_FLAG=false
for arg in "$@"; do
    if [ "$arg" = "--no-auto-update" ]; then
        NO_AUTO_UPDATE_FLAG=true
        # Remove the flag from arguments
        set -- "${@/--no-auto-update/}"
    fi
done

# Run update check if applicable and not disabled
if [ "$NO_AUTO_UPDATE_FLAG" = false ] && should_run_update_check "${1:-help}"; then
    check_for_updates
fi

# Main command dispatcher
case "${1:-help}" in
    create|new)
        shift
        cmd_create "$@"
        ;;
    list|ls)
        cmd_list
        ;;
    start|up)
        shift
        cmd_start "$@"
        ;;
    stop|down)
        shift
        cmd_stop "$@"
        ;;
    restart)
        shift
        cmd_restart "$@"
        ;;
    remove|rm|delete)
        shift
        cmd_remove "$@"
        ;;
    logs|log)
        shift
        cmd_logs "$@"
        ;;
    exec|run)
        shift
        cmd_exec "$@"
        ;;
    info|show)
        shift
        cmd_info "$@"
        ;;
    status|monitor)
        cmd_status
        ;;
    update|upgrade)
        cmd_update
        ;;
    autoupdate)
        shift
        cmd_autoupdate "$@"
        ;;
    update-ip|ip)
        shift
        cmd_update_ip "$@"
        ;;
    recover)
        shift
        cmd_recover "$@"
        ;;
    reset-password)
        shift
        cmd_reset_password "$@"
        ;;
    cleanup|clean)
        cmd_cleanup
        ;;
    destroy|uninstall)
        cmd_destroy
        ;;
    doctor|check)
        cmd_doctor
        ;;
    help|--help|-h)
        shift
        cmd_help "$@"
        ;;
    version|--version|-v)
        echo "mcs version $VERSION"
        ;;
    *)
        error "Unknown command: $1"
        echo "Run 'mcs help' for usage"
        exit 1
        ;;
esac