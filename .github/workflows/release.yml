name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'mcs-go/go.mod'
        cache-dependency-path: 'mcs-go/go.sum'
    
    - name: Run tests
      working-directory: ./mcs-go
      run: |
        go test -v -race ./...

  build:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64
            ext: .exe
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'mcs-go/go.mod'
        cache-dependency-path: 'mcs-go/go.sum'
    
    - name: Get version
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Build binary
      working-directory: ./mcs-go
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
      run: |
        VERSION=${{ steps.version.outputs.version }}
        GIT_COMMIT=$(git rev-parse HEAD)
        GIT_TAG=${VERSION}
        BUILD_TIME=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
        
        go build -ldflags "\
          -X github.com/michaelkeevildown/mcs/internal/version.Version=${VERSION} \
          -X github.com/michaelkeevildown/mcs/internal/version.GitCommit=${GIT_COMMIT} \
          -X github.com/michaelkeevildown/mcs/internal/version.GitTag=${GIT_TAG} \
          -X github.com/michaelkeevildown/mcs/internal/version.GitDirty=false \
          -X github.com/michaelkeevildown/mcs/internal/version.BuildTime=${BUILD_TIME}" \
          -o dist/mcs-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }} \
          cmd/mcs/main.go
    
    - name: Compress binary
      working-directory: ./mcs-go
      run: |
        if [ "${{ matrix.os }}" = "windows" ]; then
          zip mcs-${{ matrix.os }}-${{ matrix.arch }}.zip dist/mcs-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}
        else
          tar -czf mcs-${{ matrix.os }}-${{ matrix.arch }}.tar.gz -C dist mcs-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}
        fi
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: mcs-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          mcs-go/*.tar.gz
          mcs-go/*.zip

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Prepare release files
      run: |
        mkdir -p release
        find artifacts -type f \( -name '*.tar.gz' -o -name '*.zip' \) -exec cp {} release/ \;
        cd release
        
        # Generate checksums
        sha256sum * > checksums.txt
        
        # List files for verification
        ls -la
    
    - name: Get version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        
        # Determine if this is a pre-release
        if [[ "$VERSION" == *"-"* ]]; then
          echo "prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "prerelease=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -z "$PREV_TAG" ]; then
          echo "This is the first release!" > changelog.md
        else
          echo "## Changes since ${PREV_TAG}" > changelog.md
          echo "" >> changelog.md
          
          # Group commits by type
          echo "### Features" >> changelog.md
          git log ${PREV_TAG}..HEAD --grep="^feat" --pretty="- %s" >> changelog.md || echo "- No new features" >> changelog.md
          
          echo "" >> changelog.md
          echo "### Bug Fixes" >> changelog.md
          git log ${PREV_TAG}..HEAD --grep="^fix" --pretty="- %s" >> changelog.md || echo "- No bug fixes" >> changelog.md
          
          echo "" >> changelog.md
          echo "### Other Changes" >> changelog.md
          git log ${PREV_TAG}..HEAD --pretty="- %s" | grep -v "^- feat" | grep -v "^- fix" >> changelog.md || true
        fi
        
        echo "" >> changelog.md
        echo "### Contributors" >> changelog.md
        git log ${PREV_TAG}..HEAD --pretty="- @%an" | sort | uniq >> changelog.md || true
    
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        name: MCS ${{ steps.version.outputs.version }}
        body_path: changelog.md
        draft: false
        prerelease: ${{ steps.version.outputs.prerelease }}
        files: |
          release/*
        append_body: |
          
          ## Installation
          
          ### Quick Install (Recommended)
          ```bash
          curl -fsSL https://raw.githubusercontent.com/michaelkeevildown/michaels-codespaces/main/mcs-go/install.sh | bash
          ```
          
          ### Manual Installation
          1. Download the appropriate archive for your platform
          2. Extract the binary: `tar -xzf mcs-*.tar.gz` or `unzip mcs-*.zip`
          3. Move to your PATH: `sudo mv mcs /usr/local/bin/`
          4. Make executable: `chmod +x /usr/local/bin/mcs`
          
          ### Build from Source
          ```bash
          git clone https://github.com/michaelkeevildown/michaels-codespaces.git
          cd michaels-codespaces/mcs-go
          make install
          ```
          
          ## Verify Installation
          ```bash
          mcs version
          ```
          
          ## Upgrading
          If you have an existing installation:
          ```bash
          mcs update
          ```